#include "GTAOCommon.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/NormalBuffer.hlsl"

#pragma kernel GTAODenoise_Spatial SPATIAL
#pragma kernel GTAODenoise_Temporal                     TEMPORAL_DENOISE_KERNEL_NAME=GTAODenoise_Temporal         TEMPORAL  HALF_RES
#pragma kernel GTAODenoise_Temporal_FullRes             TEMPORAL_DENOISE_KERNEL_NAME=GTAODenoise_Temporal_FullRes TEMPORAL  FULL_RES


#pragma enable_d3d11_debug_symbols

#define BLUR_TYPE 0 // this is for testing, no bilateral

RW_TEXTURE2D_X(float3, _BentNormalsTexture);

TEXTURE2D_X_UINT(_AOPackedData);

#ifdef SPATIAL

RW_TEXTURE2D_X(uint, _AOPackedBlurred);

float Blur(float2 centralPos, out float centralDepth)
{
    float2 temporalOffset = 0;// (_FrameCount & 1) == 0 ? float2(-1.0f, 1.0f) : float2(1.0f, -1.0f);

    uint4 data_0_3 = GATHER_TEXTURE2D_X(_AOPackedData, s_linear_clamp_sampler, (centralPos + float2(-2.0f, 2.0f) + temporalOffset)  * _AOBufferSize.zw);
    uint4 data_4_7 = GATHER_TEXTURE2D_X(_AOPackedData, s_linear_clamp_sampler, (centralPos + float2(0.0f, 2.0f) + temporalOffset)  * _AOBufferSize.zw);
    uint4 data_8_11 = GATHER_TEXTURE2D_X(_AOPackedData, s_linear_clamp_sampler, (centralPos + float2(-2.0f, 0.0f) + temporalOffset)  * _AOBufferSize.zw);
    uint4 data_12_15 = GATHER_TEXTURE2D_X(_AOPackedData, s_linear_clamp_sampler, (centralPos + float2(0.0f, 0.0f) + temporalOffset)  * _AOBufferSize.zw);


    float4 AO_0_3, depths_0_3;
    UnpackGatheredData(data_0_3, AO_0_3, depths_0_3);
    float4 AO_4_7, depths_4_7;
    UnpackGatheredData(data_4_7, AO_4_7, depths_4_7);
    float4 AO_8_11, depths_8_11;
    UnpackGatheredData(data_8_11, AO_8_11, depths_8_11);
    float4 AO_12_15, depths_12_15;
    UnpackGatheredData(data_12_15, AO_12_15, depths_12_15);

    float depths[16] = { depths_0_3.x, depths_0_3.y, depths_0_3.z, depths_0_3.w, depths_4_7.x, depths_4_7.y, depths_4_7.z, depths_4_7.w, depths_8_11.x, depths_8_11.y, depths_8_11.z, depths_8_11.w, depths_12_15.x, depths_12_15.y, depths_12_15.z, depths_12_15.w };
    float AOs[16] = { AO_0_3.x, AO_0_3.y, AO_0_3.z, AO_0_3.w, AO_4_7.x, AO_4_7.y, AO_4_7.z, AO_4_7.w, AO_8_11.x, AO_8_11.y, AO_8_11.z, AO_8_11.w, AO_12_15.x, AO_12_15.y, AO_12_15.z, AO_12_15.w };

    centralDepth = depths_12_15.y;
    float centralAO = AO_12_15.y;

    float total = 0.0f;
    float weightTotal = 0.0f;
    //// This is temp, it should be a proper bilateral.

    //  TODO_FCC: Make this a gaussian! 
    for (int i = 0; i < 16; ++i)
    {
        float delta = abs(depths[i] - centralDepth);
        float localWeight = delta < centralDepth * 0.31;// TODO_FCC. actual bilateral weighting here.
        total += AOs[i] * localWeight;
        weightTotal += localWeight;
    }

    total /= weightTotal;
    return total;
}

[numthreads(8, 8, 1)]
void GTAODenoise_Spatial(uint3 dispatchThreadId : SV_DispatchThreadID)
{

    uint currData = _AOPackedData[COORD_TEXTURE2D_X(dispatchThreadId.xy)];

    float centralDepth;
    float final = Blur(dispatchThreadId.xy, centralDepth);

    _AOPackedBlurred[COORD_TEXTURE2D_X(dispatchThreadId.xy)] = PackAOOutput(final, centralDepth);
}
#endif


#ifdef TEMPORAL

RW_TEXTURE2D_X(float, _AOOutputHistory);

TEXTURE2D_X_UINT(_AOPackedBlurred);
TEXTURE2D_X(_AOPackedHistory);



float3 FetchAO(float2 coords, float2 offset, float2 scale)
{
    float2 uv = (coords + offset * _AOBufferSize.zw) * scale;
    uint data = LOAD_TEXTURE2D_X(_AOPackedBlurred, uv * _AOBufferSize.xy).x;
    float AO, depth;
    UnpackData(data, AO, depth);
    return AO;
}


#if UNITY_REVERSED_Z
#define COMPARE_DEPTH(a, b) step(b, a)
#else
#define COMPARE_DEPTH(a, b) step(a, b)
#endif


float2 GetClosestFragment(float2 positionSS)
{
    float center = LoadCameraDepth(positionSS);
    float nw = LoadCameraDepth(positionSS + int2(-1, -1));
    float ne = LoadCameraDepth(positionSS + int2(1, -1));
    float sw = LoadCameraDepth(positionSS + int2(-1, 1));
    float se = LoadCameraDepth(positionSS + int2(1, 1));

    float4 neighborhood = float4(nw, ne, sw, se);

    float3 closest = float3(0.0, 0.0, center);
    closest = lerp(closest, float3(-1.0, -1.0, neighborhood.x), COMPARE_DEPTH(neighborhood.x, closest.z));
    closest = lerp(closest, float3(1.0, -1.0, neighborhood.y), COMPARE_DEPTH(neighborhood.y, closest.z));
    closest = lerp(closest, float3(-1.0, 1.0, neighborhood.z), COMPARE_DEPTH(neighborhood.z, closest.z));
    closest = lerp(closest, float3(1.0, 1.0, neighborhood.w), COMPARE_DEPTH(neighborhood.w, closest.z));

    return positionSS + closest.xy;
}

float3 ClipToAABB(float color, float minimum, float maximum)
{
    // note: only clips towards aabb center (but fast!)
    float center = 0.5 * (maximum + minimum);
    float extents = 0.5 * (maximum - minimum);

    // This is actually `distance`, however the keyword is reserved
    float offset = color - center;

    float ts = abs(extents) / max(abs(offset), 1e-4);
    return center + offset * saturate(ts);
}


RW_TEXTURE2D_X(float4, _AODebug);


#if HALF_RES
RW_TEXTURE2D_X(uint, _OcclusionTexture);
#else
RW_TEXTURE2D_X(float, _OcclusionTexture);
#endif

float4 GetBilinearWeights(float2 uv)
{
    return 0.25f;
}

[numthreads(8, 8, 1)]
void TEMPORAL_DENOISE_KERNEL_NAME(uint3 dispatchThreadId : SV_DispatchThreadID)
{
    float2 uv = (dispatchThreadId.xy + 0.5f) * _AOBufferSize.zw/*- jitter*/;

    uint currFrameData = _AOPackedBlurred[COORD_TEXTURE2D_X((uv)* _AOBufferSize.xy)];
    float currDepth, currAO;
    UnpackData(currFrameData, currAO, currDepth);

    PositionInputs posInputs = GetPositionInput(float2(dispatchThreadId.xy), _ScreenSize.zw, uint2(8, 8));

    float2 closest = posInputs.positionSS * (1 + _AOBaseResMip);// GetClosestFragment(posInputs.positionSS * (1 + _AOBaseResMip));
    float2 motionVector;
    DecodeMotionVector(LOAD_TEXTURE2D_X(_CameraMotionVectorsTexture, closest), motionVector);
    float motionVecLength = length(motionVector);

    float2 prevFrameNDC = uv - motionVector;

    float prevAO = _AOPackedHistory[COORD_TEXTURE2D_X((prevFrameNDC) * _AOBufferSize.xy)]; //SAMPLE_TEXTURE2D_X_LOD(_AOPackedHistory, s_linear_clamp_sampler, prevFrameNDC, 0).x;
    //float prevAO, prevdepth;
    //UnpackData(prevData, prevAO, prevdepth);


    // Gather history
    //uint4 historyData = GATHER_TEXTURE2D_X(_AOPackedHistory, s_linear_clamp_sampler, prevFrameNDC);
    //float4 prevAOs, prevDepths;
    //UnpackGatheredData(historyData, prevAOs, prevDepths);

    // Gather curr
    uint4 currDatas = GATHER_TEXTURE2D_X(_AOPackedBlurred, s_linear_clamp_sampler, uv);
    float4 currAOs, currDepths;
    UnpackGatheredData(currDatas, currAOs, currDepths);


    //float scale = 100.0f;
    //float history = 0.0f;
    //float4 bw = 0;
    //for (int i = 0; i < 4; ++i)
    //{
    //    float bilateralWeight = saturate(1.0f - scale * (currDepth - prevDepths[i]));
    //    bw[i] = bilateralWeight;
    //    history += 0.25f * lerp(currAO, prevAOs[i], bilateralWeight);
    //}

    float nudgy = 0.05;
    float minAO = min(Min3(currAOs.x, currAOs.y, currAOs.z), currAOs.w) - nudgy;
    float maxAO = max(Max3(currAOs.x, currAOs.y, currAOs.z), currAOs.w) + nudgy;

    prevAO = clamp(prevAO, minAO, maxAO);

    float newAO = (lerp(currAO, prevAO, 0.9f));


    _AOOutputHistory[COORD_TEXTURE2D_X(dispatchThreadId.xy)] = newAO;

#ifdef HALF_RES
    // The conversion and the pow happens in upsample phase.
    _OcclusionTexture[COORD_TEXTURE2D_X(dispatchThreadId.xy)] = PackAOOutput(newAO, currDepths.y);
#else
    _OcclusionTexture[COORD_TEXTURE2D_X(dispatchThreadId.xy)] = 1.0f - pow(newAO, _AOIntensity);
#endif
}
#endif


